
import random
import os
import time
from colorama import Fore, Style, init

# Initialize colorama
init()

# Game constants
SCREEN_WIDTH = 40
SCREEN_HEIGHT = 20
BIRD_CHAR = "ðŸ”´"  # Circle emoji for the bird
PIPE_CHAR = "â–“"  # Block character for the pipes
GAP_SIZE = 6  # Gap between upper and lower pipes
GRAVITY = 0.1  # Reduced gravity for smoother gameplay
FLAP_STRENGTH = -1.0  # Reduced flapping power

def draw_game(bird_y, pipes, score):
    os.system("cls" if os.name == "nt" else "clear")  # Clear the screen
    # Draw the game area
    for y in range(SCREEN_HEIGHT):
        row = []
        for x in range(SCREEN_WIDTH):
            # Draw the bird
            if y == int(bird_y) and x == 5:
                row.append(Fore.RED + BIRD_CHAR + Style.RESET_ALL)  # Red circle for the bird
            else:
                is_pipe = False
                for pipe in pipes:
                    if x == pipe["x"] and (y < pipe["top"] or y >= pipe["bottom"]):
                        row.append(Fore.GREEN + PIPE_CHAR + Style.RESET_ALL)  # Green block for pipes
                        is_pipe = True
                        break
                if not is_pipe:
                    row.append(" ")
        print("".join(row))
    print(f"Score: {Fore.CYAN}{score}{Style.RESET_ALL}")

def main():
    # Initialize game state
    bird_y = SCREEN_HEIGHT // 2
    bird_velocity = 0
    pipes = []
    score = 0
    pipe_spawn_delay = 30  # Pipes spawn every 3 seconds (30 iterations * 0.1 seconds)
    pipe_counter = 0

    while True:
        # Handle input (non-blocking)
        key = None
        try:
            import sys
            import select
            if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
                key = sys.stdin.readline().strip()  # Read the entire line
        except:
            pass

        if key == "":  # If Enter key is pressed, flap
            bird_velocity = FLAP_STRENGTH

        # Update bird position
        bird_velocity += GRAVITY
        bird_y += bird_velocity

        # Update pipes
        if pipe_counter >= pipe_spawn_delay:
            gap_start = random.randint(2, SCREEN_HEIGHT - GAP_SIZE - 2)
            pipes.append({"x": SCREEN_WIDTH - 1, "top": gap_start, "bottom": gap_start + GAP_SIZE})
            pipe_counter = 0
        for pipe in pipes:
            pipe["x"] -= 1
        pipes = [pipe for pipe in pipes if pipe["x"] > 0]
        pipe_counter += 1

        # Check for collisions
        for pipe in pipes:
            if pipe["x"] == 5:
                if bird_y < pipe["top"] or bird_y >= pipe["bottom"]:
                    print(Fore.RED + "GAME OVER!" + Style.RESET_ALL)
                    return
                else:
                    score += 1

        # Draw the game
        draw_game(bird_y, pipes, score)

        # Add a small delay to control the game speed
        time.sleep(0.1)

if __name__ == "__main__":
    main()